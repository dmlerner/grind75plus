diff --git a/06-word-ladder2.py b/06-word-ladder2.py
index b78df78..ef3a9d6 100644
--- a/06-word-ladder2.py
+++ b/06-word-ladder2.py
@@ -21,7 +21,6 @@ class Trie:
         except StopIteration:
             self.terminal = True
             return
-        # first, suffix = word[0], word[1:]
         if first not in self.suffix_by_first:
             self.suffix_by_first[first] = Trie(first, self)
         self.suffix_by_first[first].add(suffix)
@@ -94,6 +93,7 @@ def build_dictionary(words):
 
 
 def count_neighbors(word, dictionary, max_dist=1):
+    # Don't care enough to use iter; was just for experimenting.
     if max_dist < 0:
         return 0
     if max_dist == 0:
@@ -113,6 +113,7 @@ def count_neighbors(word, dictionary, max_dist=1):
 
 
 def get_neighbors(word, dictionary, max_dist=1):
+    # Don't care enough to use iter; was just for experimenting.
     """inefficient but I believe working"""
     if max_dist < 0:
         return []
@@ -139,6 +140,8 @@ def get_neighbors(word, dictionary, max_dist=1):
 # @show
 def neighbor_generator(word, dictionary, max_dist=1):
     assert isinstance(word, str)
+    return _neighbor_generator(iter(word), dictionary, max_dist)
+def _neighbor_generator(word, dictionary, max_dist):
     assert isinstance(dictionary, Trie)
     if max_dist == 0:
         last_word = dictionary.get_last(word)
@@ -146,16 +149,22 @@ def neighbor_generator(word, dictionary, max_dist=1):
             yield last_word
         return
 
-    # TODO:  avoid string slicing; use iter(word)?
-    suffix = word[1:]
+    try:
+        ofirst, suffix = next(word), word
+    except StopIteration:
+        assert False
+        return
+
+    # # TODO:  avoid string slicing; use iter(word)?
+    # suffix = word[1:]
     for first, child in dictionary.suffix_by_first.items():
         subproblem_max_dist = max_dist
-        if first != word[0]:
+        if first != ofirst:
             # I would think this would let me lose the 'return' above...
             # if max_dist == 0:
             #     continue
             subproblem_max_dist -= 1
-        yield from neighbor_generator(suffix, child, subproblem_max_dist)
+        yield from _neighbor_generator(suffix, child, subproblem_max_dist)
 
 
 # @show
@@ -299,7 +308,7 @@ def test_leaf_generator_count():
     )
     assert first.parent is second.parent
     assert d.leaf_generator.call_count == len(words[0]) + 1
-    print("test_leaf_generator passes")
+    print("test_leaf_generator_count passes")
     print()
 
 
@@ -311,6 +320,7 @@ def test_neighbor_generator():
     assert first is d.suffix_by_first["h"].suffix_by_first["o"].suffix_by_first["t"]
     try:
         second = next(g)
+        print(second)
         assert False
     except StopIteration:
         pass
